{"/":{"title":"🪴 Quartz 3.3","content":"\nHost your second brain and [digital garden](https://jzhao.xyz/posts/networked-thought) for free. Quartz features\n\n1. Extremely fast natural-language [[notes/search]]\n2. Customizable and hackable design based on [Hugo](https://gohugo.io/)\n3. Automatically generated backlinks, link previews, and local graph\n4. Built-in [[notes/CJK + Latex Support (测试) | CJK + Latex Support]] and [[notes/callouts | Admonition-style callouts]]\n5. Support for both Markdown Links and Wikilinks\n\nCheck out some of the [amazing gardens that community members](notes/showcase.md) have published with Quartz or read about [why I made Quartz](notes/philosophy.md) to begin with.\n\n## Get Started\n\u003e 📚 Step 1: [Setup your own digital garden using Quartz](notes/setup.md)\n\nReturning user? Figure out how to [[notes/updating|update]] your existing Quartz garden.\n\nIf you prefer browsing the contents of this site through a list instead of a graph, you see a list of all [setup-related notes](/tags/setup).\n\n### Troubleshooting\n- 🚧 [Troubleshooting and FAQ](notes/troubleshooting.md)\n- 🐛 [Submit an Issue](https://github.com/jackyzha0/quartz/issues)\n- 👀 [Discord Community](https://discord.gg/cRFFHYye7t)\n\n","lastmodified":"2023-05-07T14:36:18.348416806Z","tags":[]},"/Learning-Obsidian":{"title":"Learning Obsidian","content":"Content around setting up obsidian and learning to obsidian for improving my memory retention of concepts I read and learn\n\nObsidian Tutorial\n\t[Obsidian As A Second Brain: The ULTIMATE Tutorial](https://www.youtube.com/watch?v=WqKluXIra70\u0026ab_channel=Dabi)\n\n\nObsidian as Task Manager?\n\t[The Ultimate Task Management Workflow In Obsidian](https://www.youtube.com/watch?v=oSGO3caCdGY\u0026ab_channel=PrakashJoshiPax)\n\n\nKeyboard shotcuts for obsedian?\n\n\nImportant plugins for obsedian?\n\n\nSyncing on multiple devices (especially phone)\n\t[How to sync Obsidian 4 FREE · Syncthing vs Autosync\t](https://www.youtube.com/watch?v=t3cy132eeUU\u0026ab_channel=DJLensing)\n\nPublishing your notes\n\t[How to Set Up a Digital Garden With Obsidian For Free](https://www.youtube.com/watch?v=kg-9n_A4Tf0\u0026ab_channel=PrakashJoshiPax)\n\t[Publish your Obsidian Vault Online for Free with Quartz](https://www.youtube.com/watch?v=ITiiuBNVue0\u0026ab_channel=BrandonBoswell)\n\n\nBackup with Git\n\t[Backup your Obsidian Vault for free](https://www.youtube.com/watch?v=BTN6hJ65qk8\u0026ab_channel=BrandonBoswell)\n\t[How to back up your notes with Obsidian Git](https://www.youtube.com/watch?v=XR7PYaMVDw0\u0026ab_channel=DannyHatcher)\n\n\n","lastmodified":"2023-05-07T14:36:18.332416442Z","tags":[]},"/Obsidian/Learning-Obsidian":{"title":"Learning Obsidian","content":"Content around setting up obsidian and learning to obsidian for improving my memory retention of concepts I read and learn\n\nObsidian Tutorial\n\t[Obsidian As A Second Brain: The ULTIMATE Tutorial](https://www.youtube.com/watch?v=WqKluXIra70\u0026ab_channel=Dabi)\n\n\nObsidian as Task Manager?\n\t[The Ultimate Task Management Workflow In Obsidian](https://www.youtube.com/watch?v=oSGO3caCdGY\u0026ab_channel=PrakashJoshiPax)\n\n\nKeyboard shotcuts for obsedian?\n\n\nImportant plugins for obsedian?\n\n\nSyncing on multiple devices (especially phone)\n\t[How to sync Obsidian 4 FREE · Syncthing vs Autosync\t](https://www.youtube.com/watch?v=t3cy132eeUU\u0026ab_channel=DJLensing)\n\nPublishing your notes\n\t[How to Set Up a Digital Garden With Obsidian For Free](https://www.youtube.com/watch?v=kg-9n_A4Tf0\u0026ab_channel=PrakashJoshiPax)\n\t[Publish your Obsidian Vault Online for Free with Quartz](https://www.youtube.com/watch?v=ITiiuBNVue0\u0026ab_channel=BrandonBoswell)\n\n\nBackup with Git\n\t[Backup your Obsidian Vault for free](https://www.youtube.com/watch?v=BTN6hJ65qk8\u0026ab_channel=BrandonBoswell)\n\t[How to back up your notes with Obsidian Git](https://www.youtube.com/watch?v=XR7PYaMVDw0\u0026ab_channel=DannyHatcher)\n\n\n","lastmodified":"2023-05-07T14:36:18.332416442Z","tags":[]},"/Obsidian/kubenetes/Beneifts-of-virtualization":{"title":"Beneifts of virtualization","content":"\n1. **Slash your IT expenses**\n\tVirtualization can reduce IT expenses by consolidating applications onto fewer physical servers.\n\t\n\u003eUtilizing a non-virtualized environment can be inefficient because when you are not consuming the application on the server, the compute is sitting idle and can't be used for other applications. When you virtualize an environment, that single physical server transforms into many virtual machines. These virtual machines can have different operating systems and run different applications while still all being hosted on the single physical server.\n\n\n2. **Reduce downtime and enhance resiliency in disaster recovery situations**\n\tVirtualization can enhance resiliency in disaster recovery situations by allowing for quick and easy replication or cloning of virtual machines from one physical server to another.\n\n\u003eWhen a disaster affects a physical server, someone is responsible for replacing or fixing it—this could take hours or even days. With a virtualized environment, \u003cu\u003eit’s easy to provision and deploy\u003c/u\u003e, allowing you to replicate or clone the virtual machine that’s been affected. The recovery process would take mere minutes—as opposed to the hours it would take to provision and set up a new physical server—significantly enhancing the resiliency of the environment and improving business continuity.\n\n\n3. **Increase efficiency and productivity**\n\tVirtualization can improve scalability and flexibility by allowing for easy deployment and management of virtual machines, Instead of doing this laborious and tedious process of applying the updates server-by-server. \n\n\u003eWith fewer servers, your IT teams will be able to spend less time maintaining the physical hardware and IT infrastructure. You’ll be able to install, update, and maintain the environment across all the VMs in the virtual environment on the server instead of going through the laborious and tedious process of applying the updates server-by-server. \n\u003eLess time dedicated to maintaining the environment increases your team’s efficiency and productivity.\n\n4. **Control independence and DevOps**\n\tVirtualization enables developers to create virtual machines for testing and development, without affecting the production environment, resulting in faster and more agile application development and deployment.\n\n\u003eSince the virtualized environment is segmented into virtual machines, your developers can quickly spin up a virtual machine without impacting a production environment. This is ideal for Dev/Test, as the developer can quickly clone the virtual machine and run a test on the environment.\n\u003e\n\u003eFor example, if a new software patch has been released, someone can clone the virtual machine and apply the latest software update, test the environment, and then pull it into their production application. This increases the speed and agility of an application.\n\n \n5. **Move to be more green-friendly (organizational and environmental)**\n\t When you are able to cut down on the number of physical servers you’re using, it’ll lead to a reduction in the amount of power being consumed. \n\t \n\t This has two green benefits:\n\t-   It reduces expenses for the business, and that money can be reinvested elsewhere.\n\t-   It reduces the carbon footprint of the data center","lastmodified":"2023-05-07T14:36:18.332416442Z","tags":[]},"/Obsidian/kubenetes/CNCF-Cloud-Native-Computing-Foundation":{"title":"CNCF - Cloud Native Computing Foundation","content":"The Cloud Native Computing Foundation (CNCF) is a Linux Foundation project that was founded in 2015 to help advance container technology and align the tech industry around its evolution.","lastmodified":"2023-05-07T14:36:18.332416442Z","tags":[]},"/Obsidian/kubenetes/Categories-of-Hypervisor":{"title":"Categories of Hypervisor","content":"There are two broad categories of hypervisors: Type 1 and Type 2.\n\n### Type 1 hypervisor - Bare Metal Hypervisor\n  \n- A Type 1 hypervisor runs directly on the underlying computer’s physical hardware, interacting directly with its CPU, memory, and physical storage. \n- For this reason, Type 1 hypervisors are also referred to as bare-metal hypervisors. \n- A Type 1 hypervisor takes the place of the host operating system.\n\n##### Advantages of Bare Metal Hypervisors\n- Type 1 hypervisors are highly efficient because they have direct access to physical hardware. \n- This also increases their security, because there is nothing in between them and the CPU that an attacker could compromise. \n- But a Type 1 hypervisor often requires a separate management machine to administer different VMs and control the host hardware.\n\n\n### Type 2 hypervisor - Hosted Hypervisor\n- A Type 2 hypervisor doesn’t run directly on the underlying hardware. \n- Instead, it runs as an application in an OS. \n- Type 2 hypervisors rarely show up in server-based environments. Instead, they’re suitable for individual PC users needing to run multiple operating systems. \n\t- Examples include engineers, security professionals analyzing malware, and business users that need access to applications only available on other software platforms.\n\n##### Advantages of Hosted Hypervisor\n- Type 2 hypervisors often feature additional toolkits for users to install into the guest OS. \n\t- These tools provide enhanced connections between the guest and the host OS, \n\t e.g. they often enable the user to cut and paste between the two or\n\t access host OS files and folders from within the guest VM.\n\n- A Type 2 hypervisor enables quick and easy access to an alternative guest OS (VMs OS) alongside the primary one running on the host system. This makes it great for end-user productivity. \n  A consumer might use it to access their favorite Linux-based development tools while using a speech dictation system only found on Windows, for example.\n\n\n##### Disadvantage of Hosted Hypervisor\n- But because a \u003cu\u003eType 2 hypervisor must access computing, memory, and network resources via the host OS\u003c/u\u003e, **it introduces latency issues that can affect performance.** \n- It also introduces potential security risks if an attacker compromises the host OS because they could then manipulate any guest OS running in the Type 2 hypervisor.\n\n\n\n![[Pasted image 20230507134752.png]]","lastmodified":"2023-05-07T14:36:18.332416442Z","tags":[]},"/Obsidian/kubenetes/Containers-Container-Images":{"title":"Containers \u0026 Container Images","content":"\nA container and a container image are related concepts in the world of [[containerization]], but they are not the same thing.\n\n- [[what is a container image?]]\n- [[what is a container?]]\n\n\nIn summary, \n- a container is an instance of a container image that runs an application, \n- while a container image is a package that contains everything needed to run an application. \nand \n- A container image is used to create containers, which are the actual runtime instances that execute the application.\n\n\n[[what are containers based on?]]\n\n\n\n","lastmodified":"2023-05-07T14:36:18.332416442Z","tags":[]},"/Obsidian/kubenetes/Deployments":{"title":"Deployments","content":"","lastmodified":"2023-05-07T14:36:18.332416442Z","tags":[]},"/Obsidian/kubenetes/Kode-Kloud-Labs-Slack-Community":{"title":"Kode Kloud Labs \u0026 Slack Community","content":"Accessing the Labs\n\nAll hands-on labs are hosted on KodeKloud. Use this link to register for the labs associated with this course. Please make sure to use the same name as your profile in Udemy. That's how we know you are our Udemy student.\n\n  \n\nNote: You don't have to make any additional payment. For now simply enrol in the lab course. We'll tell you when you start practicing once we start learning concepts.\n\n  \n\n**Link:** [https://uklabs.kodekloud.com/courses/labs-kubernetes-for-the-absolute-beginners-hands-on/](https://kodekloud.com/courses/labs-kubernetes-for-the-absolute-beginners-hands-on/)\n\nApply the coupon code **kk-labs-k8b-lakjg328321095305**\n\n\n**username**: prashant.meena@protonmail.com\n**password**: check vault\n\n\n![[Kode Kloud $0 Billing Details - With Coupon Code.png]]\n\n\n\n---\n# Slack Community\nJoin our Slack community by clicking [here](https://kodekloud.com/pages/community).","lastmodified":"2023-05-07T14:36:18.332416442Z","tags":[]},"/Obsidian/kubenetes/Kubernetes":{"title":"Kubernetes","content":"[[Kode Kloud Labs \u0026 Slack Community]]\n[[Kubernetes For Beginners - Kode Kloud.pdf]]\n\n\n[Never install locally](https://www.youtube.com/watch?v=J0NuOlA2xDc\u0026ab_channel=Coderized)\n\n\n[[Virtualization]]\n[[Containers \u0026 Container Images]]\n\n\nKubernetes = [[Containers \u0026 Container Images|Containers]] + orchestration\n\n\nMajor topics starting points\n\n- [[Pod]]\n- [[Deployments]]\n\n\nthen each topics","lastmodified":"2023-05-07T14:36:18.348416806Z","tags":[]},"/Obsidian/kubenetes/Pod":{"title":"Pod","content":"so here I can explaing what the concept is\nand then make out small small question on them\nwhich then can actually become cards linking to one or more differnt questions or topics","lastmodified":"2023-05-07T14:36:18.348416806Z","tags":[]},"/Obsidian/kubenetes/Virtualization":{"title":"Virtualization","content":"[Virtualization Explained - IBM Technology](https://www.youtube.com/watch?v=FZR0rG3HKIk)\n[Virtualization Concept - IBM Technology](https://www.ibm.com/topics/virtualization)\n\nVirtualization (v12n), is a technology that enables the creation of virtual versions of computer hardware, operating systems, storage devices, and networks. It is the foundation of [[cloud computing]].\n\nVirtualization began as a method of **logically dividing the system resources** provided by mainframe computers between different applications. This provides a way to efficiently utilize hardware resources and enables applications to run in a more flexible and scalable manner.\nWhereas traditionally, these applications would bound to hardware\n\n\nVirtualization is a concept that is used by [[What are virtual machines (VMs) |Virtual Machines]] and [[what is a container?|container]], hence virtualization allows us to run multiple virtual machines (VMs) or containers on a single physical host machine, **each with its own isolated environment**. \n\n\n[[Virtualizations Practical Example]]\n\n[[Beneifts of virtualization]]\n\n[[Types of Virtualization]]\n\n\n\nThere are different types of virtualization, including:\n\n1.  Full virtualization: In full virtualization, a hypervisor is used to create multiple virtual machines on a single physical host machine. Each virtual machine runs its own operating system and applications, and they are completely isolated from each other and the host system.\n    \n2.  Para-virtualization: In para-virtualization, the hypervisor provides a virtualized hardware interface to each virtual machine, allowing them to share physical hardware resources. This enables better performance than full virtualization, but it requires the guest operating system to be modified.\n    \n3.  Operating system-level virtualization: In operating system-level virtualization, a single operating system kernel is used to run multiple isolated user-space instances, each with its own file system, network stack, and process space. This is the type of virtualization used by containers.\n    \n4.  Application virtualization: In application virtualization, applications are encapsulated into virtual containers that include all the necessary dependencies, libraries, and configuration files needed to run the application. This enables applications to run on different operating systems without requiring modification.\n    \n\nNow, regarding the relationship between virtualization and containerization, containerization is a type of operating system-level virtualization that allows multiple isolated user-space instances to run on a single operating system kernel. Containers share the same host operating system, but each container has its own file system, network stack, and process space. In contrast, traditional virtualization involves running multiple virtual machines on a single host, each with its own operating system and kernel.\n\nContainerization provides several advantages over traditional virtualization, such as lower overhead, faster startup times, and higher density. Containerization also enables the efficient deployment and scaling of applications, making it a popular choice for modern application development and deployment.","lastmodified":"2023-05-07T14:36:18.348416806Z","tags":[]},"/Obsidian/kubenetes/Virtualizations-Practical-Example":{"title":"Virtualizations Practical Example","content":"[[Virtualization]] is technology that lets you create useful IT services using resources that are traditionally bound to hardware. It allows you to use a physical machine’s full capacity by distributing its capabilities among many users or environments.\n\n\nImagine you have 3 physical servers with individual dedicated purposes. One is a mail server, another is a web server, and the last one runs internal legacy applications. Each server is being used at about 30% capacity—just a fraction of their running potential. \n\n![[server usage - without virutalization.png]]\nTraditionally It was often easier and more reliable to run individual tasks on individual servers: 1 server, 1 operating system, 1 task. \n\nIt wasn’t easy to give 1 server multiple brains. But with virtualization, you can split the mail server into 2 unique ones that can handle independent tasks so the legacy apps can be migrated. It’s the same hardware, you’re just using more of it more efficiently.\n\n![[server usage - with virtualization.png]]\n\nKeeping security in mind, you could split the first server again so it could handle another task—increasing its use from 30%, to 60%, to 90%. \n\nsOnce you do that, the now empty servers could be reused for other tasks or retired altogether to reduce cooling and maintenance costs.","lastmodified":"2023-05-07T14:36:18.348416806Z","tags":[]},"/Obsidian/kubenetes/What-are-virtual-machines-VMs":{"title":"What are virtual machines (VMs)","content":"A virtual machine is a virtual representation, or emulation, of a physical computer. They are often referred to as a **guest**,while the physical machine they run on is referred to as the **host**.\n\nEach VM runs its own operating system (OS) and behaves like an independent computer, even though it is running on just a portion of the actual underlying computer hardware.\n\n\nA VM cannot interact directly with a physical computer. Instead, it needs a lightweight software layer called a [[What is a Hypervisor?|hypervisor]] to coordinate between it and the underlying physical hardware.\n\n\nThis technology can go by many names, including \n- **virtual server**, \n- **virtual server instance (VSI)** and \n- **virtual private server (VPS)**, \n","lastmodified":"2023-05-07T14:36:18.348416806Z","tags":[]},"/Obsidian/kubenetes/What-is-a-Hypervisor":{"title":"What is a Hypervisor?","content":"Hypervisor is a small software layer that enables multiple instances of [[operating systems]] to run alongside each other, sharing the same physical computing resources. \nThis process is called [[Virtualization]], and the operating system instances are referred to as [[What are virtual machines (VMs)|virtual machines (VMs) ]]— software emulations of physical computers.\n\n\nHypervisor is also known as **virtual machine monitor** (VMM) manages these VMs as they run alongside each other. The hypervisor allocates physical computing resources—such as processors, memory, and storage—to each VM. It keeps each VM separate from others, so they don’t interfere with each other. so if, for example, one OS suffers a crash or a security compromise, the others survive\n\n[[Categories of Hypervisor]]\n\nexplaing it\nits type?\nits working?? mybe","lastmodified":"2023-05-07T14:36:18.348416806Z","tags":[]},"/Obsidian/kubenetes/container":{"title":"container","content":"","lastmodified":"2023-05-07T14:36:18.348416806Z","tags":[]},"/Obsidian/kubenetes/what-are-containers-based-on":{"title":"what are containers based on?","content":"Containers are based on the concept of [[operating system-level virtualization]], where multiple isolated user-space instances can run on a single operating system kernel. Containers share the same kernel as the host operating system, but each container has its own file sysstem, network stack, and process space.\n\nContainers can be managed using container orchestration tools like Kubernetes, which automate the deployment, scaling, and management of containers across multiple hosts. Containers are popular in modern software development and deployment because they offer a fast, reliable, and scalable way to package and distribute software applications.\n\n\nA container is a standard unit of software that packages up code and all its dependencies so the application runs quickly and reliably from one computing environment to another.","lastmodified":"2023-05-07T14:36:18.348416806Z","tags":[]},"/Obsidian/kubenetes/what-is-a-container":{"title":"what is a container?","content":"\nIn the context of computing,\n- A container is a lightweight, isolated, and **executable runtime instance** that runs an application and all its dependencies in an isolated environment. \n- Containers are created from container images and are typically used to run and deploy applications in a consistent and portable manner.\n- Containers provide an isolated and consistent environment for applications to run, regardless of the host system they are running on.\n\n\n**Container images become containers at runtime**\n\n\nHence we can say in short\n- A container is a \u003cu\u003estandard unit of software\u003c/u\u003e that packages up the application code and all its dependencies, so the application can run quickly and reliably from one computing environment to another.\n\n\n![[whats included in a container.png]]\n\n\n\n\n![[containerized applications architecture.png]]","lastmodified":"2023-05-07T14:36:18.348416806Z","tags":[]},"/Obsidian/kubenetes/what-is-a-container-image":{"title":"what is a container image?","content":"\nIn the context of computing,\n- A container image is a lightweight, standalone, executable package that contains everything needed to run a piece of software, including application code, runtime environment, system tools, libraries, and settings. \n\n\nContainer Image: A container image is a lightweight, standalone, and executable package that contains all the necessary dependencies, libraries, and configuration files needed to run an application. \n\nA container image is built from a Dockerfile or another container image and can be used to create containers. Container images are typically stored in a container registry and can be shared and distributed to other systems.","lastmodified":"2023-05-07T14:36:18.348416806Z","tags":[]}}